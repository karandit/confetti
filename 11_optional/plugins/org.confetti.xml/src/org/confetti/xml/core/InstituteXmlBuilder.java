package org.confetti.xml.core;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Lists.transform;
import static java.util.Optional.of;
import static org.confetti.xml.core.BaseConstraintXml.newXmlConstraint;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.confetti.core.Assignment;
import org.confetti.core.AssignmentGroup;
import org.confetti.core.DataProvider;
import org.confetti.dataprovider.xml.AssignmentGroupImpl;
import org.confetti.util.Tuple;

import com.google.common.base.Function;

public class InstituteXmlBuilder {

	public static Tuple<InstituteXml, List<Tuple<Long, Assignment>>> createInstitueXml(DataProvider dp) {
		InstituteXml inst = new InstituteXml(dp.getName().getValue(), "5.22.0", "generated by confetti");
		
		//Transforming Subjects, Teachers, StudentGroups, Rooms, Days, Hours for FET
		inst.setSubjects(convertToList(dp.getSubjects().getList(), subj -> new SubjectXml(subj.getName().getValue())));
		inst.setTeachers(convertToList(dp.getTeachers().getList(), teacher -> new TeacherXml(teacher.getName().getValue())));
		inst.setYears(convertToList(dp.getStudentGroups().getList(), YearXml::new));
		inst.setBuildings(convertToList(dp.getBuildings().getList(), building -> new BuildingXml(building.getName().getValue())));
		inst.setRooms(convertToList(dp.getRooms().getList(), room -> new RoomXml(
						room.getName().getValue(),
						room.getBuilding().getValue().map(b -> b.getName().getValue()).orElse(""),
						room.getCapacity().getValue())));
		inst.setDays(new DaysXml(convertToList(dp.getDays().getList(), day -> new DayXml(day.getName().getValue()))));
		inst.setHours(new HoursXml(convertToList(dp.getHours().getList(), hour -> new HourXml(hour.getName().getValue()))));
		inst.setActivityTags(convertToList(dp.getTags().getList(), tag -> new ActivityTagXml(tag.getName().getValue())));
		
		//Transforming Assignments for FET and saving the newly assigned ids for further look up
		long counter = 1;
		Map<Assignment, Long> assgIds = new HashMap<>();
		List<Tuple<Long, Assignment>> tuples = new LinkedList<>();
		for (Assignment assignment : dp.getAssignments().getList()) {
			long newId = counter; //TODO: ((AssignmentImpl) assignment).getId();
			tuples.add(new Tuple<>(newId, assignment));
			assgIds.put(assignment, newId);
			counter++;
		}
		inst.setActivities(transform(tuples, tuple -> createActivityXml(tuple.getFirst(), tuple.getSecond())));

		//Transforming Constraints for FET
		ConstraintSetter setter = new ConstraintSetter(assg -> assgIds.get(assg));
		dp.getConstraints().getList().forEach(constr ->
			newXmlConstraint(inst, constr.getConstraintType(), constr.getAttributes().getValue(), setter));

		return new Tuple<>(inst, tuples);
	}
	
	private static ActivityXml createActivityXml(Long id, Assignment assg) {
		int duration = assg.getDuration().getValue();
		long activityGroupId = assg.getGroup().getValue()
				.flatMap((AssignmentGroup x) -> of(((AssignmentGroupImpl) x).getId()))
				.orElse(0);
		int totalDuration = assg.getGroup().getValue()
				.flatMap(assGroup -> of(assGroup.getAssignments().stream()
					.map(ass -> ass.getDuration().getValue())
					.reduce(0, (a,b) -> a + b)))
				.orElse(duration); 
		
		return new ActivityXml(id, duration, activityGroupId, totalDuration,
      		assg.getSubject(), 
      		assg.getTeachers().getList(), 
      		assg.getStudentGroups().getList(), 
      		assg.getTags().getList());
	}

	private static <T, F> List<T> convertToList(Iterable<F> items, Function<F, T> f) {
		return transform(newArrayList(items), f); 
	}

}
